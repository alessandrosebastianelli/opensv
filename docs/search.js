window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyosv", "modulename": "pyosv", "kind": "module", "doc": "<p><img src=\"https://img.shields.io/github/last-commit/alessandrosebastianelli/opensv?style=flat-square\" alt=\"GitHub last commit\" />\n<img src=\"https://img.shields.io/github/contributors/alessandrosebastianelli/opensv?style=flat-square\" alt=\"GitHub contributors\" />\n<img src=\"https://img.shields.io/github/issues/alessandrosebastianelli/opensv?style=flat-square\" alt=\"GitHub issues\" />\n<img src=\"https://img.shields.io/github/issues-pr/alessandrosebastianelli/opensv?style=flat-square\" alt=\"GitHub pull requests\" /></p>\n\n<h1 id=\"open-satellite-vision\">Open Satellite Vision</h1>\n\n<p>This library comprises a collection of functions and classes tailored to manage satellite based data.</p>\n\n<p><a class=\"btn btn-success\" href=\"https://alessandrosebastianelli.github.io/opensv/pyosv.html\" target=\"_blank\">Click here to access the documentation</a></p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>You need to create a virtual environment</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>conda<span class=\"w\"> </span>create<span class=\"w\"> </span>-n<span class=\"w\"> </span>osv<span class=\"w\"> </span><span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.10<span class=\"w\"> </span>-y\nconda<span class=\"w\"> </span>activate<span class=\"w\"> </span>osv\nconda<span class=\"w\"> </span>install<span class=\"w\"> </span>pip<span class=\"w\"> </span>-y\n</code></pre>\n</div>\n\n<p>This package is stored on <a href=\"https://pypi.org/project/pyosv/\">PyPi</a>, you can easily install it using pip</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>--upgrade<span class=\"w\"> </span>pyosv\n</code></pre>\n</div>\n\n<p>Although certain elements of this library draw from Mayavi, these package is not included in the library's prerequisites, and therefore, it will not be automatically installed. To install it run the following command, once your virtual environment is active</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>mayavi\n</code></pre>\n</div>\n\n<p>or </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>conda<span class=\"w\"> </span>install<span class=\"w\"> </span>mayavi\n</code></pre>\n</div>\n\n<p>if there are issue with the first command.</p>\n\n<h2 id=\"how-to-contribute\">How to contribute</h2>\n\n<p><a href=\"https://github.com/alessandrosebastianelli/opensv/issues/2\">Click here</a></p>\n"}, {"fullname": "pyosv.ai", "modulename": "pyosv.ai", "kind": "module", "doc": "<p>pyosv routines related to ai-based image processing</p>\n"}, {"fullname": "pyosv.ai.clustering", "modulename": "pyosv.ai.clustering", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.ai.clustering.pixel_clustering", "modulename": "pyosv.ai.clustering", "qualname": "pixel_clustering", "kind": "function", "doc": "<p>Image pixel clustering using Support Vector machine</p>\n\n<p>Parameters:</p>\n\n<hr />\n\n<pre><code> - img : np.ndarray  \n     a WxHxB image, with width W, height H and B bands (channel last)\n - n_clusters : int  \n     number of cluster to be identified\n</code></pre>\n\n<p>Returns:</p>\n\n<hr />\n\n<pre><code> - clusters : np.ndarray  \n     clustered pixels\n</code></pre>\n\n<p>Usage:</p>\n\n<hr />\n\n<p><div class=\"pdoc-code codehilite\">\n <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span> <br />\n \n <span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span> <br />\n     <span class=\"p\">[[</span>\n         <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n      <span class=\"p\">],</span>\n      <span class=\"p\">[</span>\n         <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n      <span class=\"p\">]</span>\n     <span class=\"p\">]</span> <br />\n <span class=\"p\">)</span> \n \n <span class=\"c1\"># Making channels last</span>\n <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n \n <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">pixel_clustering</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n </code></pre>\n </div></p>\n\n<p>Output:</p>\n\n<hr />\n\n<p><code>\n array([[0, 0, 0],\n        [0, 0, 1],\n        [1, 1, 1]], dtype=int32)\n</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">n_clusters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.ai.clustering.conv_clustering", "modulename": "pyosv.ai.clustering", "qualname": "conv_clustering", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyosv.ai.data_reduction", "modulename": "pyosv.ai.data_reduction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.ai.data_reduction.image_PCA", "modulename": "pyosv.ai.data_reduction", "qualname": "image_PCA", "kind": "function", "doc": "<p>Reduce the image dimensionality along the channells axis using PCA</p>\n\n<p>Parameters:  </p>\n\n<hr />\n\n<pre><code> - img : np.ndarray\n     a WxHxB image, with width W, height H and B bands (channel last)\n - n_components : int\n     number of bands of the compressed image\n</code></pre>\n\n<p>Returns:</p>\n\n<hr />\n\n<pre><code> - reduced : np.ndarray\n     the WxHxn_components compressed image, with width W, height H and n_components bands\n</code></pre>\n\n<p>Usage:</p>\n\n<hr />\n\n<p><div class=\"pdoc-code codehilite\">\n <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span> <br />\n \n <span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span> <br />\n     <span class=\"p\">[[</span>\n         <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n      <span class=\"p\">],</span>\n      <span class=\"p\">[</span>\n         <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span> <br />\n         <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n      <span class=\"p\">]</span>\n     <span class=\"p\">]</span> <br />\n <span class=\"p\">)</span> \n \n <span class=\"c1\"># Making channels last</span>\n <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n \n <span class=\"n\">reduced</span> <span class=\"o\">=</span> <span class=\"n\">image_PCA</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">n_components</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n </code></pre>\n </div></p>\n\n<p>Output:</p>\n\n<hr />\n\n<p><code>\n array([\n       [[ 0.56568542],\n         [ 0.42426407],\n         [ 0.28284271]],\n       [[0.14142136],\n         [-0.        ],\n         [-0.14142136]],\n       [[-0.28284271],\n         [-0.42426407],\n         [-0.56568542]]])\n</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">n_components</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.ai.data_reduction.image_stack_PCA", "modulename": "pyosv.ai.data_reduction", "qualname": "image_stack_PCA", "kind": "function", "doc": "<p>Reduce a temporal stack of images along the temporal axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">imgs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">n_components</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.freq", "modulename": "pyosv.freq", "kind": "module", "doc": "<p>pyosv routines related to image frequency analysis</p>\n"}, {"fullname": "pyosv.freq.fft", "modulename": "pyosv.freq.fft", "kind": "module", "doc": "<p>Created on Tue Jun 28 17:50:18 2022</p>\n\n<p>@author: alessandrosebastianelli</p>\n"}, {"fullname": "pyosv.freq.fft.fft2d", "modulename": "pyosv.freq.fft", "qualname": "fft2d", "kind": "function", "doc": "<p>Calculates the 2D Fast Fourier Transform of an image</p>\n\n<p>Input:\n    - image: a WxH image, must be a single band image, with width W, height H\nOutputs:\n    - fft: 2D spectrum of image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyosv.freq.fft.ifft2d", "modulename": "pyosv.freq.fft", "qualname": "ifft2d", "kind": "function", "doc": "<p>Calculates the inverse 2D Fast Fourier Transform of a spectrum of an image</p>\n\n<p>Input:\n    - fft: 2D spectrum of image \nOutputs:\n    - ifft: a WxH image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fft</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyosv.freq.fft.fft3d", "modulename": "pyosv.freq.fft", "qualname": "fft3d", "kind": "function", "doc": "<p>Calculates the 2D Fast Fourier Transform of an image with multiple bands</p>\n\n<p>Input:\n    - image: a WxHxB image, with width W, height H and B bands\nOutputs:\n    - fft: array of 2D spectra of the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyosv.freq.fft.ifft3d", "modulename": "pyosv.freq.fft", "qualname": "ifft3d", "kind": "function", "doc": "<p>Calculates the inverse 2D Fast Fourier Transform of a vecctor of spectra of a multibands image</p>\n\n<p>Input:\n    - fft: array of 2D spectra of the image\nOutputs:\n    - ifft: a WxHxB image, with width W, height H and B bands</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ffts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyosv.freq.filters", "modulename": "pyosv.freq.filters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.freq.filters.gaussian_filter", "modulename": "pyosv.freq.filters", "qualname": "gaussian_filter", "kind": "function", "doc": "<p>Apply a 2D gaussian filter to the input 2D spectrum</p>\n\n<h2 id=\"prameters\">Prameters:</h2>\n\n<pre><code>- fft : np.ndarray \n    2D spectrum to be filtered\n- mx : int \n    mean of gaussian x function (default : 0)\n- my : int\n    mean of gaussian y function (default : 0)\n- sx : int\n    standard deviation of gaussian x function (default : 1)\n= sy : int\n    standard deviation of gaussian y function (default : 1)\n- invert : bool\n    invert the distribution (default : False)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- filt : np.ndarray\n    filtered spectrum\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n\n<span class=\"p\">)</span>\n\n<span class=\"n\">filt</span> <span class=\"o\">=</span> <span class=\"n\">gaussian_filter</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">,</span> <span class=\"n\">mx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">my</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">invert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>array([  \n    [0.        , 0.        , 0.09653235, 0.        , 0.        ],  \n    [0.        , 0.061975  , 0.14045374, 0.061975  , 0.        ],  \n    [0.09653235, 0.14045374, 0.15915494, 0.14045374, 0.09653235],  \n    [0.        , 0.061975  , 0.14045374, 0.061975  , 0.        ],  \n    [0.        , 0.        , 0.09653235, 0.        , 0.        ]])  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fft</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">mx</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">my</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sx</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">sy</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">invert</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.freq.filters.lhp_filter", "modulename": "pyosv.freq.filters", "qualname": "lhp_filter", "kind": "function", "doc": "<p>Apply a low pass or high pass filter to the input 2D spectrum</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- fft : np.ndarray\n    2D spectrum to be filtered\n- radius : int\n    size of the filter, ammited range [0-1], will mask to zero fft values lower than radius (default : 0.5)\n- invert: bool\n    invert the distribution (default : False)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- fft : np.ndarray\n    filtered spectrum\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n\n<span class=\"p\">)</span>\n\n<span class=\"n\">filt</span> <span class=\"o\">=</span> <span class=\"n\">lhp_filter</span><span class=\"p\">(</span><span class=\"n\">fft</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">invert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>array([  \n    [0., 0., 1., 0., 0.],  \n    [0., 0., 0., 0., 0.],  \n    [1., 0., 0., 0., 1.],  \n    [0., 0., 0., 0., 0.],  \n    [0., 0., 1., 0., 0.]])  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fft</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">invert</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyosv.io", "modulename": "pyosv.io", "kind": "module", "doc": "<p>pyosv routines related to image input/output</p>\n"}, {"fullname": "pyosv.io.batch_reader", "modulename": "pyosv.io.batch_reader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.io.batch_reader.load", "modulename": "pyosv.io.batch_reader", "qualname": "load", "kind": "function", "doc": "<p>Load an image patch by patch</p>\n\n<p>Supported data format</p>\n\n<p>RASTERIO_EXTENSIONS   = ['.tif', '.tiff', '.geotiff'] <br />\nMATPLOTLIB_EXTENSIONS = ['.png', '.jpg', 'jpeg']</p>\n\n<p>Returns always data in channel last format.</p>\n\n<p>If image extension is in MATPLOTLIB_EXTENSIONS, metadata and bound will be None.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- path : str\n    position of the image, if None the function will ask for the image path using a menu\n- patch_shape :  tuple[int,int]\n    tuple of two integers representing the size of the patches to be loaded from the image\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- data : np.ndarray\n    patch_shape[0]xpatch_shape[1]xB image patch, with patch_shape[0] width, patch_shape[1] height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span>\n        <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">patch_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"mi\">64</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">patch</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">)</span> \n</code></pre>\n</div>\n\n<p>or</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span>\n        <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;path/to/image.png&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">patch</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">)</span> \n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>P1:\n\n    array([[[5872., 5532., 5516., ...,    0.,    0., 1024.],  \n            [5872., 5588., 5451., ...,    0.,    0., 1024.],  \n            [5872., 5606., 5333., ...,    0.,    0., 1024.],  \n            ...,  \n            [2672., 2602., 2368., ...,    0.,    0., 1024.],  \n            [2672., 2689., 2394., ...,    0.,    0., 1024.],  \n            [2672., 2705., 2431., ...,    0.,    0., 1024.]],  \n            ...,  \n            [[1571., 1318., 1167., ...,    0.,    0.,    0.],  \n            [1571., 1206., 1113., ...,    0.,    0.,    0.],  \n            [1571., 1230., 1094., ...,    0.,    0.,    0.],  \n            ...,  \n            [1330., 1044.,  837., ...,    0.,    0.,    0.],  \n            [1330., 1045.,  842., ...,    0.,    0.,    0.],  \n            [1330., 1032.,  833., ...,    0.,    0.,    0.]]])\n\nP2:\n    array([[[1015.,  741.,  673., ...,    0.,    0.,    0.],  \n            [1015.,  729.,  676., ...,    0.,    0.,    0.],  \n            [1015.,  757.,  670., ...,    0.,    0.,    0.],  \n            ...,  \n            [1039.,  764.,  692., ...,    0.,    0.,    0.],  \n            [1039.,  752.,  702., ...,    0.,    0.,    0.],  \n            [1039.,  761.,  736., ...,    0.,    0.,    0.]],  \n            ...,  \n            [[1012.,  728.,  630., ...,    0.,    0.,    0.],  \n            [1012.,  742.,  686., ...,    0.,    0.,    0.],  \n            [1012.,  754.,  724., ...,    0.,    0.,    0.],  \n            ...,  \n            [1033.,  773.,  715., ...,    0.,    0.,    0.],  \n            [1033.,  768.,  733., ...,    0.,    0.,    0.],  \n            [1033.,  763.,  745., ...,    0.,    0.,    0.]]])  \n\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">patch_shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.io.reader", "modulename": "pyosv.io.reader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.io.reader.load", "modulename": "pyosv.io.reader", "qualname": "load", "kind": "function", "doc": "<p>Load an image and its metadata given its path.</p>\n\n<p>Supported data format</p>\n\n<p>RASTERIO_EXTENSIONS   = ['.tif', '.tiff', '.geotiff'] <br />\n MATPLOTLIB_EXTENSIONS = ['.png', '.jpg', 'jpeg', 'jp2']</p>\n\n<p>Returns always data in channel last format.</p>\n\n<p>If image extension is in MATPLOTLIB_EXTENSIONS, metadata and bound will be None.</p>\n\n<p>Parameters:</p>\n\n<hr />\n\n<pre><code> - path : str\n     position of the image, if None the function will ask for the image path using a menu\n</code></pre>\n\n<p>Returns:</p>\n\n<hr />\n\n<pre><code> - data : np.ndarray\n     WxHxB image, with W width, H height and B bands\n\n - metadata : dict\n     dictionary containing image metadata\n\n - bounds : list\n     list containing geo bounds\n</code></pre>\n\n<p>Usage:</p>\n\n<hr />\n\n<p><div class=\"pdoc-code codehilite\">\n <pre><span></span><code>    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n </code></pre>\n </div></p>\n\n<p>or\n <div class=\"pdoc-code codehilite\">\n <pre><span></span><code>    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;path/to/image.png&quot;</span><span class=\"p\">)</span>\n </code></pre>\n </div></p>\n\n<p>Output:</p>\n\n<hr />\n\n<pre><code> (\n     array([[[5872., 5532., 5516., ...,    0.,    0., 1024.],  \n             [5872., 5588., 5451., ...,    0.,    0., 1024.],  \n             [5872., 5606., 5333., ...,    0.,    0., 1024.],  \n             ...,  \n             [2672., 2602., 2368., ...,    0.,    0., 1024.],  \n             [2672., 2689., 2394., ...,    0.,    0., 1024.],  \n             [2672., 2705., 2431., ...,    0.,    0., 1024.]],  \n             ...,  \n             [[1571., 1318., 1167., ...,    0.,    0.,    0.],  \n             [1571., 1206., 1113., ...,    0.,    0.,    0.],  \n             [1571., 1230., 1094., ...,    0.,    0.,    0.],  \n             ...,  \n             [1330., 1044.,  837., ...,    0.,    0.,    0.],  \n             [1330., 1045.,  842., ...,    0.,    0.,    0.],  \n             [1330., 1032.,  833., ...,    0.,    0.,    0.]]]),  \n\n     {'driver': 'GTiff', 'dtype': 'float64', 'nodata': None, 'width': 1043, 'height': 1040, 'count': 16, 'crs': CRS.from_epsg(32632), 'transform': Affine(10.0, 0.0, 638640.0,\n0.0, -10.0, 5084590.0), 'blockxsize': 256, 'blockysize': 256, 'tiled': True, 'compress': 'lzw', 'interleave': 'pixel'},  \n\nBoundingBox(left=638640.0, bottom=5074190.0, right=649070.0, top=5084590.0))  \n )\n\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;numpy.ndarray&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;]:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.io.writer", "modulename": "pyosv.io.writer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.io.writer.write", "modulename": "pyosv.io.writer", "qualname": "write", "kind": "function", "doc": "<p>Save an image and its metadata given a path.</p>\n\n<p>Supported data format</p>\n\n<p>RASTERIO_EXTENSIONS   = ['.tif', '.tiff', '.geotiff'] <br />\nMATPLOTLIB_EXTENSIONS = ['.png', '.jpg', 'jpeg', 'jp2']</p>\n\n<p>Data must always be in channel last format.</p>\n\n<p>If image extension is in MATPLOTLIB_EXTENSIONS, metadata can be None.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- image : np.ndarray\n    the WxHxC image to be saved, with W width, H height and B bands (channel last)\n- path : str \n    position of the image, if None the function will ask for the image path using a menu\n- meta : dict\n    metadata for the image to be saved\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, the image will be saved</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path/to/save/img.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, the image will be saved</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.plot", "modulename": "pyosv.plot", "kind": "module", "doc": "<p>pyosv routines related to image plotting</p>\n"}, {"fullname": "pyosv.plot.cube", "modulename": "pyosv.plot.cube", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.plot.cube.plot3d", "modulename": "pyosv.plot.cube", "qualname": "plot3d", "kind": "function", "doc": "<p>3D-Plot of a satellite image.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray\n    a WxHxB image, with width W, height H and B bands (B can be 3 or 1)\n- animate : bool\n    activate animation mode (dafault : False)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will display the image</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channel last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">plot3d</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">animate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, it will display the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">animate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.plot.cube.cube_plot", "modulename": "pyosv.plot.cube", "qualname": "cube_plot", "kind": "function", "doc": "<p>Cube pot of a satellite image.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray\n    a WxHxB image, with width W, height H and B bands (B can be 3 or 1)\n- band_thinkness : int\n    thikness of each satellite band\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will display the image</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channel last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">cube_plot</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">band_thikness</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, it will display the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">band_thinkness</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.plot.geo", "modulename": "pyosv.plot.geo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.plot.geo.geo_plot", "modulename": "pyosv.plot.geo", "qualname": "geo_plot", "kind": "function", "doc": "<p>Overlay a satellite image on a map</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray\n    the WxHxC image to be plotted, with W width, H height and B bands (channel last)\n- metadata : dict\n    metadata for the image to be saved\n- bounds : list\n    list of geo bounds for the image\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing an image is displayed</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span>  \n\n<span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;driver&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GTiff&#39;</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;dtype&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;nodata&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;height&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;count&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;crs&#39;</span><span class=\"p\">:</span> <span class=\"n\">CRS</span><span class=\"o\">.</span><span class=\"n\">from_epsg</span><span class=\"p\">(</span><span class=\"mi\">32632</span><span class=\"p\">),</span>  \n        <span class=\"s1\">&#39;transform&#39;</span><span class=\"p\">:</span> <span class=\"n\">Affine</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">638640.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">5084590.0</span><span class=\"p\">),</span>  \n        <span class=\"s1\">&#39;blockxsize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;blockysize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;tiled&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  \n        <span class=\"s1\">&#39;compress&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;lzw&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;interleave&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pixel&#39;</span>  \n        <span class=\"p\">}</span>  \n\n<span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"n\">BoundingBox</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">638640.0</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=</span><span class=\"mf\">5074190.0</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"mf\">649070.0</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mf\">5084590.0</span><span class=\"p\">))</span>  \n\n<span class=\"n\">geo_plot</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, the image is displayed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.plot.plot", "modulename": "pyosv.plot.plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.plot.plot.plot", "modulename": "pyosv.plot.plot", "qualname": "plot", "kind": "function", "doc": "<p>Plot a satellite image and its histogram.</p>\n\n<p>Only gray-scale or RGB-like are accepted.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray\n    a WxHxB image, with width W, height H and B bands (B can be 3 or 1)\n- hist : bool\n    if True display also the histogram (dafault : False)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will display the image</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Adding fake axis</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">[:,:,</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">hist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, it will display the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">hist</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.plot.plot.bands_plot", "modulename": "pyosv.plot.plot", "qualname": "bands_plot", "kind": "function", "doc": "<p>Plot a satellite image bands and relative histograms.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray\n    a WxHxB image, with width W, height H and B bands\n- hist : bool\n    if True display also the histograms (dafault : False)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will display the image</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Adding fake axis</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">bands_plot</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">hist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, it will display the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">hist</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.post", "modulename": "pyosv.post", "kind": "module", "doc": "<p>pyosv routines related to image post-processing</p>\n"}, {"fullname": "pyosv.post.normalized_difference", "modulename": "pyosv.post.normalized_difference", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.post.normalized_difference.normalized_difference", "modulename": "pyosv.post.normalized_difference", "qualname": "normalized_difference", "kind": "function", "doc": "<p>Normalized Difference</p>\n\n<p>nd = (channelA - channleB)/(channelA + channle_B + E)          (1)</p>\n\n<p>where E stabilizes the division.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- channel_1 : np.ndarray \n    channelA in equation (1)\n- channel_2 : np.ndarray\n    channelB in equation (1)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- nd : np.ndarray\n    normalized difference between channelA and Channelb in equation (1)\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">ch1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n            <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">ch2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mf\">2.1</span><span class=\"p\">,</span> <span class=\"mf\">2.2</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">2.4</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">2.6</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">2.7</span><span class=\"p\">,</span> <span class=\"mf\">2.8</span><span class=\"p\">,</span> <span class=\"mf\">2.9</span><span class=\"p\">]</span>\n            <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">nd</span> <span class=\"o\">=</span> <span class=\"n\">normalized_difference</span><span class=\"p\">(</span><span class=\"n\">ch1</span><span class=\"p\">,</span> <span class=\"n\">ch2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>    [[-0.90909091 -0.83333333 -0.76923077]  \n    [-0.71428571 -0.66666667 -0.625     ]  \n    [-0.58823529 -0.55555556 -0.52631579]]  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel_1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">channel_2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.post.patch_extractor", "modulename": "pyosv.post.patch_extractor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.post.patch_extractor.get_patches", "modulename": "pyosv.post.patch_extractor", "qualname": "get_patches", "kind": "function", "doc": "<p>Split an image into patches</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray \n    a WxHxB image, with width W, height H and B bands\n- kernel : tuple\n    Tuple of two values used to define the size of the patch\n- stride :  tuple\n    Tuple of two values representing the stride to extract patches\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- patches : np.ndarray\n    the Nx(kernel[0])x(kernel[1])xB vector containing the N patches extracted from img\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">patches</span> <span class=\"o\">=</span> <span class=\"n\">get_patches</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[[[[</span><span class=\"mf\">0.1</span> <span class=\"mf\">0.1</span> <span class=\"mf\">0.1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.2</span> <span class=\"mf\">0.2</span> <span class=\"mf\">0.2</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.4</span> <span class=\"mf\">0.4</span> <span class=\"mf\">0.4</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.2</span> <span class=\"mf\">0.2</span> <span class=\"mf\">0.2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.3</span> <span class=\"mf\">0.3</span> <span class=\"mf\">0.3</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.3</span> <span class=\"mf\">0.3</span> <span class=\"mf\">0.3</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.3</span> <span class=\"mf\">0.3</span> <span class=\"mf\">0.3</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.4</span> <span class=\"mf\">0.4</span> <span class=\"mf\">0.4</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.7</span> <span class=\"mf\">0.7</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span> <span class=\"mf\">0.5</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span> <span class=\"mf\">0.6</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.7</span> <span class=\"mf\">0.7</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.7</span> <span class=\"mf\">0.7</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span> <span class=\"mf\">0.8</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]]]</span>\n\n\n<span class=\"p\">[[[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]]</span>\n\n<span class=\"p\">[[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span> <span class=\"mf\">0.9</span><span class=\"p\">]]]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.post.patch_extractor.patches_generator", "modulename": "pyosv.post.patch_extractor", "qualname": "patches_generator", "kind": "function", "doc": "<p>Split an image into patches</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray \n    a WxHxB image, with width W, height H and B bands\n- kernel : tuple\n    Tuple of two values used to define the size of the patch\n- stride :  tuple\n    Tuple of two values representing the stride to extract patches\n- batch_size : int\n    integere representing how many patches yield at each iteration\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- patches : np.ndarray\n    the (batch_size)x(kernel[0])x(kernel[1])xB vector containing the N patches extracted from img\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">patches</span> <span class=\"o\">=</span> <span class=\"n\">patches_generator</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre", "modulename": "pyosv.pre", "kind": "module", "doc": "<p>pyosv routines related to image pre-processing</p>\n"}, {"fullname": "pyosv.pre.hist_normalizer", "modulename": "pyosv.pre.hist_normalizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.pre.hist_normalizer.hist_normalizer", "modulename": "pyosv.pre.hist_normalizer", "qualname": "hist_normalizer", "kind": "function", "doc": "<p>Open a gui that helps to stretch the histogram of an image</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray \n    a WxHxB image, with width W, height H and B bands\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will display and image</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">hist_normalizer</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<p>Nothing, it will display an image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre.normalizer", "modulename": "pyosv.pre.normalizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.pre.normalizer.percentile_prescaler", "modulename": "pyosv.pre.normalizer", "qualname": "percentile_prescaler", "kind": "function", "doc": "<p>Clip image between minimum and maximum based on the percentile</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray \n    a WxHxB image, with W width, H height and B bands            \n- perc: int\n    the percentile value \n- mmin : float\n    the minimum value to clip the img (default : None), if None mmin is calculated from img\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- img : np.ndarray \nnormalized WxHxB image, with W width, H height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">img_n</span> <span class=\"o\">=</span> <span class=\"n\">percentile_prescaler</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">perc</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"n\">mmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>    [[[0.1   1.1  ]  \n    [0.2   1.2  ]  \n    [0.3   1.3  ]]  \n    [[0.4   1.4  ]  \n    [0.5   1.5  ]  \n    [0.6   1.6  ]]  \n    [[0.7   1.7  ]  \n    [0.8   1.8  ]  \n    [0.9   1.815]]]  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">perc</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">mmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre.normalizer.minmax_scaler", "modulename": "pyosv.pre.normalizer", "qualname": "minmax_scaler", "kind": "function", "doc": "<p>Apply the min max scaler to the input img:  </p>\n\n<p>out = (img - minimum)/(maximum - minimum + E)          (1)  </p>\n\n<p>where E stabilizes the division. </p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code> - img : np.ndarray \n    a WxHxB image, with W width, H height and B bands\n- mmin : list \n    the minimum in equation (1) (default : None)\n- mmax : lsit\n    the maximum in equation (1) (default : None)\n- clip : list \n    a list of two values used to constrain the image values (default : [None, None])\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- img : np.ndarray\n    normalized WxHxB image, with W width, H height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">img_n</span> <span class=\"o\">=</span> <span class=\"n\">minmax_scaler</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">mmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.5</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>[[[0.0999001 0.5      ]  \n[0.1998002 0.5      ]  \n[0.2997003 0.5      ]]  \n[[0.3996004 0.5      ]  \n[0.4995005 0.5      ]  \n[0.5       0.5      ]]  \n[[0.5       0.5      ]  \n[0.5       0.5      ]  \n[0.5       0.5      ]]]  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">mmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clip</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre.normalizer.std_scaler", "modulename": "pyosv.pre.normalizer", "qualname": "std_scaler", "kind": "function", "doc": "<p>Apply the min max scaler to the input img:  </p>\n\n<p>out = (img - mean)/(std)             (1)  </p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code> - img : np.ndarray \n    a WxHxB image, with W width, H height and B bands\n- mmean : list \n    the mean in equation (1) (default : None)\n- sstd : lsit\n    the standar deviation in equation (1) (default : None)\n- clip : list \n    a list of two values used to constrain the image values (default : [None, None])\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- img : np.ndarray\n    normalized WxHxB image, with W width, H height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">img_n</span> <span class=\"o\">=</span> <span class=\"n\">std_scaler</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.5</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>    [[[0.         0.17770466]  \n    [0.         0.35540933]  \n    [0.         0.5       ]]  \n    [[0.         0.5       ]  \n    [0.         0.5       ]  \n    [0.         0.5       ]]  \n    [[0.         0.5       ]  \n    [0.         0.5       ]  \n    [0.         0.5       ]]]   \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">mmean</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sstd</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clip</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre.normalizer_bands", "modulename": "pyosv.pre.normalizer_bands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.pre.normalizer_bands.percentile_prescaler", "modulename": "pyosv.pre.normalizer_bands", "qualname": "percentile_prescaler", "kind": "function", "doc": "<p>Clip image between minimum and maximum based on the percentile</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- img : np.ndarray \n    a WxHxB image, with W width, H height and B bands            \n- perc: list\n    the percentile values (one for each band)\n- mmin : list\n    the minimum values (one for each band) to clip the img (default : None), if None mmin is calculated from img\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- img : np.ndarray \n    normalized WxHxB image, with W width, H height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">img_n</span> <span class=\"o\">=</span> <span class=\"n\">percentile_prescaler</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">perc</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">95</span><span class=\"p\">,</span><span class=\"mi\">95</span><span class=\"p\">],</span> <span class=\"n\">mmin</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>    [[0.1  1.1 ] \n    [0.2  1.2 ]  \n    [0.3  1.3 ]]  \n    [[0.4  1.4 ]  \n    [0.5  1.5 ]  \n    [0.6  1.6 ]]  \n    [[0.7  1.7 ]  \n    [0.8  1.8 ]  \n    [0.86 1.86]]]  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">perc</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">mmin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre.normalizer_bands.minmax_scaler", "modulename": "pyosv.pre.normalizer_bands", "qualname": "minmax_scaler", "kind": "function", "doc": "<p>Apply the min max scaler to the input img:  </p>\n\n<p>out = (img - minimum)/(maximum - minimum + E)          (1)  </p>\n\n<p>where E stabilizes the division. </p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code> - img : np.ndarray \n    a WxHxB image, with W width, H height and B bands\n- mmin : list \n    the minimum in equation (1) (one for each band) (default : None)\n- mmax : lsit\n    the maximum in equation (1) (one for each band) (default : None)\n- clip : list \n    a list of two values used to constrain the image values (default : [None, None])\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- img : np.ndarray\n    normalized WxHxB image, with W width, H height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">img_n</span> <span class=\"o\">=</span> <span class=\"n\">minmax_scaler</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">mmin</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">mmax</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.5</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>[[[0.0999001 0.5      ]  \n[0.1998002 0.5      ]  \n[0.2997003 0.5      ]]  \n[[0.3996004 0.5      ]  \n[0.4995005 0.5      ]  \n[0.5       0.5      ]]  \n[[0.5       0.5      ]  \n[0.5       0.5      ]  \n[0.5       0.5      ]]]  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">mmin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mmax</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clip</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.pre.normalizer_bands.std_scaler", "modulename": "pyosv.pre.normalizer_bands", "qualname": "std_scaler", "kind": "function", "doc": "<p>Apply the min max scaler to the input img:  </p>\n\n<p>out = (img - mean)/(std)             (1)  </p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code> - img : np.ndarray \n    a WxHxB image, with W width, H height and B bands\n- mmean : list \n    the mean in equation (1) (one for each band) (default : None)\n- sstd : lsit\n    the standar deviation in equation (1) (one for each band) (default : None)\n- clip : list \n    a list of two values used to constrain the image values (default : [None, None])\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- img : np.ndarray\n    normalized WxHxB image, with W width, H height and B bands\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  \n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">img_n</span> <span class=\"o\">=</span> <span class=\"n\">std_scaler</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.5</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>    [[[0.  0.4]  \n    [0.  0.4]  \n    [0.  0.4]]  \n    [[0.  0.5]  \n    [0.  0.5]  \n    [0.  0.5]]  \n    [[0.2 0.5]  \n    [0.2 0.5]  \n    [0.2 0.5]]]   \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">mmean</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sstd</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clip</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.utils", "modulename": "pyosv.utils", "kind": "module", "doc": "<p>pyosv routines related to image utils</p>\n"}, {"fullname": "pyosv.utils.mapper", "modulename": "pyosv.utils.mapper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.utils.mapper.mapFromTo", "modulename": "pyosv.utils.mapper", "qualname": "mapFromTo", "kind": "function", "doc": "<p>Map x from range a,b to range c,d</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- x : np.ndarray\n    input to be mapped\n- a : int \n    min range from, if None it will inputed using x\n- b : int\n    max range from, if None it will inputed using x\n- c : int\n    min range to\n- d : int\n    max range to\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- y : np.ndarray\n    mapped values\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span>\n\n<span class=\"n\">img_m</span> <span class=\"o\">=</span> <span class=\"n\">mapFromTo</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>[[[  0.          14.16666667  28.33333333]  \n[ 42.5         56.66666667  70.83333333]  \n[ 85.          99.16666667 113.33333333]]  \n[[141.66666667 155.83333333 170.        ]  \n[184.16666667 198.33333333 212.5       ]  \n[226.66666667 240.83333333 255.        ]]]  \n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.utils.paths", "modulename": "pyosv.utils.paths", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.utils.paths.get_path_gui", "modulename": "pyosv.utils.paths", "qualname": "get_path_gui", "kind": "function", "doc": "<p>Get the path of a file using a graphical menu    </p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>Nothing</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>- path: path of the image\n</code></pre>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">get_path_gui</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>/path/to/file/img.png\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.utils.printer", "modulename": "pyosv.utils.printer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyosv.utils.printer.dict_disp", "modulename": "pyosv.utils.printer", "qualname": "dict_disp", "kind": "function", "doc": "<p>Print a dictionary in a more readable way</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<pre><code>- dictionary : dict\n    python dictionary to print\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will print the dictionary</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Name&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;John&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Surname&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Wick&#39;</span><span class=\"p\">}</span>\n<span class=\"n\">disp_dict</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>-----------Dictionary------------  \n    [*] Name : Johnny\n    [*] Surname : Wick\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyosv.utils.printer.print_stats", "modulename": "pyosv.utils.printer", "qualname": "print_stats", "kind": "function", "doc": "<p>Print some statistics for the input image</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>- image: a WxHxB image, with width W, height H and B bands\n- bandwise : bool \n    if true the function will print the statistics for each band separately (default : False)\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Nothing, it will print image statistics</p>\n\n<h2 id=\"usage\">Usage:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">img</span>         <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>  \n    <span class=\"p\">[[</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span>\n     <span class=\"p\">],</span>\n     <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.6</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">1.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">]</span>\n     <span class=\"p\">]</span>\n    <span class=\"p\">]</span>  \n<span class=\"p\">)</span> \n\n<span class=\"c1\"># Making channels last</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">moveaxis</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_stats</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">bandwise</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"output\">Output:</h2>\n\n<pre><code>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">bandwise</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();